{
  "name": "mdc-light",
  "version": "0.1.0",
  "description": "Machine Data Connector Lite",
  "main": "index.js",
  "repository": "git@gitlab.com:codestryke-tech/dmg-mori/mdc-light.git",
  "author": "codestryke <info@codestryke.com>",
  "license": "",
  "private": true,
  "dependencies": {
    "@types/bcrypt": "^5.0.0",
    "azure-iot-device": "^1.17.6",
    "azure-iot-device-mqtt": "^1.15.6",
    "azure-iot-provisioning-device": "^1.8.10",
    "azure-iot-provisioning-device-amqp": "^1.8.10",
    "azure-iot-provisioning-device-http": "^1.8.10",
    "azure-iot-provisioning-device-mqtt": "^1.7.10",
    "azure-iot-security-symmetric-key": "^1.7.10",
    "bcrypt": "^5.0.1",
    "body-parser": "^1.19.0",
    "date-fns": "^2.22.1",
    "express": "^4.17.1",
    "express-fileupload": "^1.2.1",
    "express-openapi-validator": "^4.13.1",
    "fs-extra": "^10.0.0",
    "https-proxy-agent": "^5.0.0",
    "jsonwebtoken": "^8.5.1",
    "node-opcua": "2.68.0",
    "node-opcua-pki": "^2.12.0",
    "nodes7": "^0.3.12",
    "socks-proxy-agent": "^6.1.0",
    "swagger-routes-express": "^3.3.1",
    "swagger-ui-express": "^4.2.0",
    "uuid": "^8.3.2",
    "winston": "^3.3.3",
    "winston-daily-rotate-file": "^4.6.1"
  },
  "scripts": {
    "dev": "export NODE_ENV=development && npm run loglevel:debug && ts-node-dev --respawn --inspect=0.0.0.0:9229 --transpile-only --max-old-space-size=1024 src/index.ts",
    "dev:docker:all": "npm run setup:local:dev && docker build -f docker/mdclight-base.Dockerfile -t mdclight-base:latest ./docker/ && $(docker-compose -f docker/docker-compose_local.yaml up --build & cd client && npm run dev)",
    "dev:webserver": "cd client && yarn dev",
    "yesOrNo": "./scripts/yesOrNo.sh",
    "setup:local:dev": "./scripts/createLocalTestingEnv.sh",
    "build": "tsc -p tsconfig.json",
    "build:dist": "ncc build build/main/index.js -o runtime --minify",
    "build:webserver": "cd client && yarn && yarn build-dev && cd .. && cd user-docs && yarn && yarn build && cd .. && mv user-docs/build client/dist/mdc-light-client/help",
    "docker:build:webserver": "scripts/build/dockerBuildWebserver.sh",
    "docker:run:mtc": "docker run -v $PWD/_mdclight/mtc_config/MtcAgentConfig_dev/schemas:/schemas -v $PWD/_mdclight/mtc_config/MtcAgentConfig_dev/agent.cfg:/agent.cfg -v $PWD/_mdclight/mtc_config/MtcAgentConfig_dev/MDCLight.xml:/MDCLight.xml -p 15404:5000 registry.gitlab.com/codestryke-tech/dmg-mori/mdc-light/mtconnect:latest agent debug",
    "docker:build:mdclight-base": "scripts/build/dockerBuildMdclightBase.sh",
    "docker:build:mdclight": "scripts/build/dockerBuildMdclight.sh",
    "docker:build:mtc-prod": "scripts/build/dockerBuildMtc.sh",
    "deploy:service:mdcflash": "export INSTALL_HOST=`devTools/checkEnvironmentVariable.sh $INSTALL_HOST` && buil&& scp services/mdclflash/*.service $INSTALL_HOST:/etc/systemd/system && ssh $INSTALL_HOST systemctl enable mdclflash.service && ssh $INSTALL_HOST systemctl start mdclflash.service",
    "test": "jest",
    "copy_mdc_conf": "scp -r _mdclight/config root@$IP:/etc/MDCLight",
    "copy_mtc_conf": "scp -r _mdclight/mtc_config/MtcAgentConfig_prod root@$IP:/etc/MDCLight/mtc_config",
    "copy_compose": "scp docker/docker-compose_arm64.yaml mdclite@$IP:/home/mdclite/docker-compose.yaml && scp -r docker/environments/.env* mdclite@$IP:/home/mdclite/",
    "format": "prettier --write .",
    "loglevel:debug": "export LOG_LEVEL=debug",
    "dump:remote:external": "ssh $REMOTE_HOST \"/root/cleanup.sh && dd if=/dev/mmcblk0 | gzip -9 -\" | dd of=\"./dump-\"`date +\"%d-%m-%Y\"`\".gz\"",
    "dump:remote:internal": "ssh $REMOTE_HOST \"/root/cleanup.sh && dd if=/dev/mmcblk1 | gzip -1 -\" | dd of=\"./dump-\"`date +\"%d-%m-%Y\"`\".gz\"",
    "setup_mock_sysfs": "./scripts/setupSysfsMock.sh", 
    "deploy:service:containerkeys": "export INSTALL_HOST=`devTools/checkEnvironmentVariable.sh $INSTALL_HOST` && ssh $INSTALL_HOST mkdir /home/mdclite/.ssh && ssh $INSTALL_HOST touch /home/mdclite/.ssh/authorized_keys && scp host/services/ContainerKeys/containerkeys.service $INSTALL_HOST:/etc/systemd/system && ssh $INSTALL_HOST systemctl enable containerkeys.service && ssh $INSTALL_HOST systemctl start containerkeys.service",
    "deploy:service:tlskeys": "export INSTALL_HOST=`devTools/checkEnvironmentVariable.sh $INSTALL_HOST` && scp host/services/TLSKeys/*.service $INSTALL_HOST:/etc/systemd/system && ssh $INSTALL_HOST systemctl enable tlskeys.service && ssh $INSTALL_HOST systemctl start containerkeys.service",
    "deploy:service:systemd-resolved": "INSTALL_HOST=`devTools/checkEnvironmentVariable.sh $INSTALL_HOST` && ssh $INSTALL_HOST systemctl enable systemd-resolved.service && ssh $INSTALL_HOST systemctl start systemd-resolved.service",
    "deploy:permissions:file": "export INSTALL_HOST=`devTools/checkEnvironmentVariable.sh $INSTALL_HOST` && scp host/configs/sudoers.d/mdclite $INSTALL_HOST:/etc/sudoers.d/mdclite && ssh $INSTALL_HOST chmod 440 /etc/sudoers.d/mdclite",
    "deploy:network:connections": "export INSTALL_HOST=`devTools/checkEnvironmentVariable.sh $INSTALL_HOST` && scp host/configs/NetworkManager/system-connections/*default $INSTALL_HOST:/etc/NetworkManager/system-connections",
    "deploy:network:conf": "export INSTALL_HOST=`devTools/checkEnvironmentVariable.sh $INSTALL_HOST` && scp -rp host/configs/NetworkManager/conf.d/* $INSTALL_HOST:/etc/NetworkManager/conf.d",
    "deploy:script:update": "export INSTALL_HOST=`devTools/checkEnvironmentVariable.sh $INSTALL_HOST` && scp -rp host/scripts/update/update.sh $INSTALL_HOST:/opt && ssh $INSTALL_HOST chmod 100 /opt/update.sh",
    "deploy:service:all": "npm run deploy:service:containerkeys && npm run deploy:service:tlskeys && npm run deploy:service:systemd-resolved",
    "deploy:change:user:pw": "export INSTALL_HOST=`devTools/checkEnvironmentVariable.sh $INSTALL_HOST` && read -p \"user to change password: \" USERNAME && read -s -p \"New password: \" NEW_PASSWORD && ssh $INSTALL_HOST `echo -e \"$NEW_PASSWORD\n$NEW_PASSWORD\" | passwd $USERNAME`",
    "deploy:login:container:registry": "scripts/loginDockerRegistries.sh",
    "deploy:all": "npm run deploy:login:container:registry && npm run copy_mdc_conf && npm run copy_mtc_conf && npm run deploy:permissions:file && npm run deploy:network:connections && npm run deploy:network:conf && npm run copy_compose",
    "deploy:clean:logs:and:shutdown": "export INSTALL_HOST=`devTools/checkEnvironmentVariable.sh $INSTALL_HOST` && ssh $INSTALL_HOST \"rm -rf /etc/MDCLight/logs/*.log /etc/MDCLight/config/auth.json /etc/MDCLight/config/certs && cp /etc/MDCLight/config/config.factory.json /etc/MDCLight/config/config.json && cat /dev/null > ~/.bash_history && cat /dev/null > /home/mdclite/.bash_history && history -c && rm -rf /var/log/* && nohup shutdown now &\"",
    "deploy:clean:images": "export INSTALL_HOST=`devTools/checkEnvironmentVariable.sh $INSTALL_HOST` && ssh INSTALL_HOST docker image prune --all --force"
  },
  "devDependencies": {
    "@types/express": "^4.17.13",
    "@types/jest": "^26.0.24",
    "@types/jsonwebtoken": "^8.5.5",
    "@types/node": "^16.9.1",
    "@typescript-eslint/eslint-plugin": "^5.3.0",
    "@typescript-eslint/parser": "^5.3.0",
    "@vercel/ncc": "^0.28.6",
    "concurrently": "^6.3.0",
    "eslint": "^7.32.0",
    "eslint-config-airbnb-base": "^14.2.1",
    "eslint-plugin-import": "^2.25.2",
    "eslint-plugin-jest": "^25.2.2",
    "jest": "^27.0.6",
    "prettier": "^2.4.1",
    "ts-jest": "^27.0.3",
    "ts-node-dev": "^1.1.8",
    "typed-emitter": "^1.3.1",
    "typescript": "^4.3.5"
  }
}
