{
  "swagger": "2.0",
  "info": {
    "description": "RESTful API for the MDC Light project.",
    "version": "1.0.0",
    "title": "MDCLight",
    "contact": {
      "email": "info@codestryke.com"
    }
  },
  "host": "localhost:5000",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "datasource",
      "description": "Everything about the data source"
    },
    {
      "name": "datasinks",
      "description": "Everything about the data sinks"
    },
    {
      "name": "virtual datapoints",
      "description": "Everything about the data points"
    },
    {
      "name": "backup",
      "description": "Everything about the backup and restore"
    },
    {
      "name": "mappings",
      "description": "Everything about the mappings."
    }
  ],
  "produces": ["application/json"],
  "schemes": ["https", "http"],
  "paths": {
    "/datasources": {
      "get": {
        "tags": ["datasource"],
        "description": "Returns all available datasources of the runtime",
        "parameters": [],
        "operationId": "dataSourcesGet",
        "responses": {
          "200": {
            "description": "A list of all available datasources.",
            "schema":{
              "$ref": "#/definitions/dataSourceList"
            }
          }
        }
      }
    },
    "/datasources/{datasourceId}": {
      "parameters": [
        {
          "name": "datasourceId",
          "in": "path",
          "description": "id of the datasource",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "tags": ["datasource"],
        "operationId": "dataSourceGet",
        "responses": {
          "200": {
            "description": "Request dateSource with given ID",
            "schema":{
              "$ref": "#/definitions/dataSourceType"
            }
          }
        }
      },
      "patch": {
        "tags": ["datasource"],
        "summary": "change datasource",
        "description": "Only for toggling enabled property",
        "operationId": "dataSourcePatch",
        "parameters": [
          {
            "name": "changeObject",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/changeDatasource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully changed datasource",
            "schema": {
              "$ref": "#/definitions/dataSourceType"
            }
          }
        }
      }  
    },
    "/datasources/{datasourceId}/dataPoints": {
      "parameters": [
        {
          "name": "datasourceId",
          "in": "path",
          "description": "id of the datasource",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "tags": ["datasource"],
        "description": "Returns a list of dataPoints of this datasource",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {
                "dataPoints:" :{
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/sourcedatapoint"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["datasource"],
        "description": "Create a new datapoint for the selected datasource.",
        "parameters": [
          {
            "in": "body",
            "name": "newDatapoint",
            "description": "New datapoint to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sourcedatapoint"
            }
          }
        ],
        "responses": {
          "200":{
            "description": "The new created datapoint",
            "schema": {
              "type": "object",
              "properties": {
                "created": {
                  "$ref": "#/definitions/sourcedatapoint"
                }
              }
            }
          }
        }
      }
    },
    "/datasources/{datasourceId}/dataPoints/{datapointId}": {
      "parameters": [
        {
          "name": "datasourceId",
          "in": "path",
          "description": "id of the datasource",
          "required": true,
          "type": "string"
        },
        {
          "name": "datapointId",
          "in": "path",
          "description": "id of the datapoint",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "tags": ["datasource"],
        "description": "returns a datapoint with given id",
        "responses": {
          "200":{
            "description": "returns a datapoint with given id",
            "schema":{
              "$ref": "#/definitions/sourcedatapoint"
            }
          }
        }
      },
      "delete": {
        "tags": ["datasource"],
        "description": "Delete the datapoint selected by id",
        "responses": {
          "200": {
            "description": "Successfully deleted datapoint",
            "schema":{
              "type": "object",
              "properties": {
                "deleted":{
                  "$ref": "#/definitions/sourcedatapoint"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["datasource"],
        "description": "overwrite datapoint with selected id",
        "parameters": [
        {
          "in": "body",
          "name": "changedDatapoint",
          "required": true,
          "description": "The new datapoint",
          "schema": {
            "$ref": "#/definitions/sourcedatapoint"
          }
        }
        ],
        "responses": {
          "200":{
            "description": "Overwritten datapoint",
            "schema":{
              "type": "object",
              "properties": {
                "changed": {
                  "$ref": "#/definitions/sourcedatapoint"
                },
                "href":{
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/datasinks": {
      "get": {
        "tags": ["datasinks"],
        "description": "Returns all available datesinks of the runtime",
        "operationId": "dataSinksGet",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful request to datasinks",
            "schema": {
              "type": "object",
              "properties": {
                "dataSinks": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/dataSinkType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/datasinks/{datasinkId}": {
      "parameters": [
        {
          "name": "datasinkId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "tags": ["datasinks"],
        "operationId": "dataSinkGet",
        "summary": "Get datasink object by id",
        
        "responses": {
          "200": {
            "description": "Datasink object",
            "schema":{
              "$ref": "#/definitions/dataSinkType"
            }
          }
        }
      }
    },
    "/datasinks/{datasinkId}/dataPoints": {
      "parameters": [
        {
          "name": "datasinkId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "tags": ["datasinks"],
        "operationId": "dataPointsGet",
        "responses": {
          "200":{
            "description": "Return list of dataPoints",
            "schema": {
              "$ref": "#/definitions/dataPointList"
            }
          }
        }
      },
      "post": {
        "tags": ["datasinks"],
        "operationId": "dataPointsPost",
        "parameters": [
          {
            "name": "dataPoint",
            "in": "body",
            "description": "New Datapoint object",
            "schema": {
              "$ref": "#/definitions/dataPointType"
            }
          }
        ],
        "responses": {
          "200":{
            "description": "Response of a new created dataPoint",
            "schema":{
              "type": "object",
              "properties": {
                "created": {
                  "$ref": "#/definitions/dataPointType"
                },
                "href": {
                  "type": "string",
                  "description": "url for direct resource access"
                }
              }
              }
          }
        }
      }
    },
    "/datasinks/{datasinkId}/dataPoints/{dataPointId}": {
      "parameters": [
        {
          "name": "datasinkId",
          "in": "path",
          "description": "id of the datapoint to get",
          "required": true,
          "type": "string"
        },
        {
          "name": "dataPointId",
          "in": "path",
          "description": "id of the datapoint to get",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "tags": ["datasinks"],
        "operationId": "dataPointGet",
        "responses": {
          "200": {
            "$ref": "#/definitions/dataPointType"
          }
        }
      },
      "patch": {
        "tags": ["datasinks"],
        "operationId": "dataPointPatch",
        "parameters": [
          {
            "name": "patchData",
            "in": "body",
            "description": "DataPoint object with changed properties",
            "required": true,
            "schema": {
              "$ref": "#/definitions/dataPointType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response of a change request for a datapoint with given id",
            "schema": {
              "$ref": "#/definitions/dataPointType"
            }
          }
        }
      },
      "delete": {
        "tags": ["datasinks"],
        "operationId": "dataPointDelete",
        "responses": {
          "200":{
            "description": "Delete a datapoint by id and return the deleted item.",
            "schema":{
              "type": "object",
              "properties": {
                "deleted":{
                  "type": "object",
                  "$ref": "#/definitions/dataPointType"
                }
              }
            }
          }
        }
      }
    },
    "/vdps": {
      "get": {
        "tags": ["virtual datapoints"],
        "description": "Return a list of virtual datapoints",
        "operationId": "vdpsGet",
        "responses": {
          "200": {
            "description": "List of virtual datapoints.",
            "schema": {
              "type": "object",
              "properties": {
                "vdps": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/virtualDataPointType"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["virtual datapoints"],
        "description": "Add a virtual datapoint to the runtime",
        "parameters": [
          {
            "in": "body",
            "name": "newVDP",
            "description": "New virtual datapoint",
            "required": true,
            "schema": {
              "$ref": "#/definitions/virtualDataPointType"
            }
          }
        ],
        "operationId": "vdpsPost",
        "responses": {
          "200": {
            "description": "Successfully create a virtual datapoint resource",
            "schema": {
              "required": ["properties", "href"],
              "type": "object",
              "properties": {
                "virtualDataPoint":{
                  "$ref": "#/definitions/virtualDataPointType"
                },
                "href": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/vdps/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "type": "string",
          "description": "Id of the virtual datapoint to operate on",
          "required": true
        }
      ],
      "get": {
        "tags": ["virtual datapoints"],
        "operationId": "vdpGet",
        "responses": {
          "200": {
            "description": "Returns a virtual datapoint",
            "schema": {
              "$ref": "#/definitions/virtualDataPointType"
            }
          }
        }
      },
      "delete": {
        "tags": ["virtual datapoints"],
        "operationId": "vdpDelete",
        "responses": {
          "200":{
            "description": "Delete virtual datapoint with given id."
          }
        }
      },
      "patch": {
        "tags": ["virtual datapoints"],
        "operationId": "vdpPatch",
        "parameters": [{
          "name": "patched virtual datapoint",
          "in": "body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/virtualDataPointType"
          }
        }],
        "responses": {
          "200": {
            "description": "Changed virtual dataPoint",
            "schema":{
              "type": "object",
              "properties": {
                "changed": {
                  "$ref": "#/definitions/virtualDataPointType"
                },
                "href": {
                  "type": "string",
                  "description": "URL of the changed resource."
                }
              }
            }
          }
        }
      }
    },
    "/backup":{
      "get": {
        "tags": ["backup"],
        "operationId": "backupGet",
        "produces": ["application/x-binary"],
        "responses": {
          "200": {
            "description": "Config file as JSON.",
            "schema":{
              "type": "file",
              "format": "binary"
            }
          }
        }
      },
      "post": {
        "tags": ["backup"],
        "operationId": "backupPost",
        "consumes": ["multipart/form-data"],
        "parameters": [
          {
            "in": "formData",
            "description": "New config file to use.",
            "name": "config",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200":{
            "description": "Config file uploaded to the system.",
            "schema":{
              "$ref": "#/definitions/configFile"
            }
          }
        }
      }
    },
    "/mappings": {
      "get": {
        "tags": ["mappings"],
        "operationId": "mappingsGet",
        "responses": {
          "200": {
            "description": "List of all available mappings",
            "schema": {
              "$ref": "#/definitions/mapping"
              }
            }
          }
        },
      "post": {
        "tags": ["mappings"],
        "operationId": "mapPost",
        "parameters": [
          {
            "in": "body",
            "name": "newMapping",
            "description": "new mapping object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/map"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created new mapping",
            "schema": {
              "$ref": "#/definitions/map"
            }
          }
        }
      }
    },
    "/mappings/{mapId}": {
      "parameters": [
        {
          "in": "path",
          "name": "mapId",
          "required": true,
          "type": "string",
          "description": "parameter for selection of the map"
        }
      ],
      "get": {
        "tags": ["mappings"],
        "description": "Return a single mapping object",
        "responses": {
          "200": {
            "description": "The requested mapping object",
            "schema": {
              "$ref": "#/definitions/map"
            }
          }
        }
      },
      "delete": {
        "tags": ["mappings"],
        "operationId": "mapDelete",
        "description": "Delete the selected map",
        "responses": {
          "200": {
            "description": "Successfully delete mapping"
          }
        }
      }
    }
  },
  "definitions": {
    "changeDatasource": {
      "description": "JSON type for change enable state or connection",
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "connection": {
          "$ref": "#/definitions/connection"
        }
      }
    },
    "virtualDataPointType": {
      "type": "object",
      "required": ["id", "sources", "operationType"],
      "properties": {
        "id": {
          "type": "string"
        },
        "sources": {
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "string"
          }
        },
        "operationType": {
          "type": "string",
          "pattern": "[and|or|not|counter]"
        }
      }
    },
    "sourcedatapoint": {
      "type": "object",
      "required": ["id", "name", "address", "readFrequency", "type"],
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "address": {
          "type": "string",
          "pattern": "TODO:"
        },
        "readFrequency": {
          "type": "integer",
          "minimum": 0
        },
        "description": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["s7", "nck"]
        }
      }
    },
    "dataSinkType": {
      "type": "object",
      "properties": {
        "id":{
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "datapoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/dataPointType"
          }
        },
        "enabled": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "datasinkArrayItem": {
      "required": ["name", "id", "href"],
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "protocol":{
          "type": "string"
        },
        "href": {
          "type": "string"
        }
      }
    },
    "virtualdatapointArrayItem": {
      "required": ["name", "id", "href"],
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "href": {
          "type": "string"
        }
      }
    },
    "dataSourceType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "dataPoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sourcedatapoint"
          }
        },
        "protocol": {
          "type": "string"
        },
        "connection": {
          "$ref": "#/definitions/connection"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "dataSourceList": {
      "type": "object",
      "properties": {
        "dataSources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/dataSourceType"
          }
        }
      }
    },
    "datasourceArrayItem": {
      "required": ["name", "id", "href", "enabled"],
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "href": {
          "type": "string"
        }
      }
    },
    "connection": {
      "type": "object",
      "properties": {
        "ipAddr": {
          "type": "string"
        },
        "port":{
          "type": "integer",
          "minimum": 0
        },
        "rack":{
          "type": "number",
          "minimum": 0
        },
        "slot": {
          "type": "number",
          "minimum": 0
        }
      }
    },
    "dataPointList": {
      "type": "object",
      "properties": {
        "dataPoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/dataPointType"
          }
        }
      }
    },
    "dataPointType":{
      "type": "object",
      "properties": {
        "id": {"type": "string"},
        "name":{"type": "string"},
        "type":{"type": "string", "enum": ["event"]},
        "map":{"type": "array","items": {"type": "string"}},
        "initValue":{
          "description": "index af map for the init value",
          "type": "integer",
          "minimum": 0
        },        
        "enabled": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "dataPointArrayItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["event"]
        }
      }
    },
    "configFile": {
      "type": "object",
      "required": ["dataSources", "dataSinks", "dataPoints", "virtualDataPoints", "mapping"],
      "additionalProperties": false,
      "properties": {
        "dataSources":{
          "type": "array",
          "items": {
            "$ref": "#/definitions/dataSourceType"
          }
        },
        "dataSinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/dataSinkType"
          }
        },
        "dataPoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/dataPointType"
          }
        },
        "virtualDataPoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/virtualDataPointType"
          }
        },
        "mapping": {
          "$ref": "#/definitions/mapping"
        }
      }
    },
    "mapping": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/map"
      }
    },
    "map": {
      "type": "object",
      "required": ["id", "source", "target"],
      "properties": {
        "id": {
          "type": "string"
        },
        "source":{
          "type": "string"
        },
        "target":{
          "type": "string"
        },
        "mapValue": {
          "type": "string"
        },
        "priority": {
          "type": "integer"
        }
      }
    }
  }
}
