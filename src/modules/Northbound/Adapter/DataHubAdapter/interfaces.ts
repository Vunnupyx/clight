import { DeviceMethodRequest } from 'azure-iot-device';

/**
 * Event payload for an dmg azure function call
 */
export interface CommandEventPayload {
  command?: string;
  layer?: string;
  release?: string;
  twinVersion?: string;
  baseLayerVersion?: string;
  locale?: string;
}

/**
 * Response message from azure function
 */
export type AzureResponse = DeviceMethodRequest & {
  requestId: string; // UUID generated by Azure backend
  methodName: string; // Name we register
  payload: {
    command: 'get-mdclight-updates' | 'update-mdclight-version';
    commandId: string; // Same as methodName
    payload:
      | ProgressPayload
      | UpdatesResultPayload
      | UpdateTriggeredResultPayload
      | ErrorResult;
  };
};

/**
 * Version information for a available mdclight version send to frontend
 */
export type VersionInformation = {
  release: string;
  BaseLayerVersion: string;
  releaseNotes: string;
  OSVersion: string;
  releaseNotesMissingReason: string;
};

/**
 * Payload received from from azure functions
 */
export type AzureResponsePayload = ProgressPayload | UpdatesResultPayload;

/**
 * Payload response with progress status
 */
export type ProgressPayload = {
  progress: any;
};

/**
 * Payload response with final result
 */
export type UpdatesResultPayload = {
  result: UpdateResult;
};

/**
 * Result after update trigger
 */
export type UpdateTriggeredResultPayload = {
  result: Result;
};

/**
 * Result Mesasge
 */
export type Result = {
  message: string;
};

/**
 * Result message with list of available updates
 */
export type UpdateResult = Result & {
  updateList: Array<AzureUpdateEntry>;
};

/**
 * Payload if any error accurse inside azure function
 */
export type ErrorResult = {
  error: {
    code?: number;
    message: string;
    data?: any;
  };
};

/**
 * Type guard
 */
export function isUpdatesResultPayload(obj: any): obj is UpdatesResultPayload {
  return (
    obj &&
    obj.result &&
    obj.result.updateList &&
    Array.isArray(obj.result.updateList) &&
    typeof obj.result.message === 'string'
  );
}
/**
 * Type Guard
 */
export function isUpdateTriggeredResultPayload(
  obj: any
): obj is UpdateTriggeredResultPayload {
  return (
    obj &&
    obj.result &&
    obj.result.message &&
    typeof obj.result.message === 'string' &&
    typeof obj.result.updateList === 'undefined'
  );
}
/**
 *
 * @param obj object to test
 * @returns is object from type ErrorResult
 */
export function isErrorResultPayload(obj: any): obj is ErrorResult {
  return (
    obj &&
    obj.error &&
    typeof obj.error === 'object' &&
    obj.error.message &&
    typeof obj.error.message === 'string'
  );
}

/**
 * Entry inside update deploymentData manifest
 */
export type ContainerVersionsEntry = { name: string; tag: string };

/**
 * Update release entry
 */
export type AzureUpdateEntry = {
  release: string;
  date: string;
  appliedTo: [{ regions: Array<any>; customer_clusters: Array<any> }];
  deploymentData: {
    BaseLayerVersion: string;
    OSVersion: string;
    containerVersions: Array<ContainerVersionsEntry>;
  };
  releaseNotes: string;
  releaseNotesMissingReason: string;
};
